#import Adafruit_BBIO.ADC as ADC
import time


### Model of the system where the temperature needs to be kept constant
# Input parameters:
#   temp_comp : temperature compensator from previous computation
#   T_ambient : ambient temperature (supplied by the environment)
#   T_gradient: temperature gradient (supplied by FIS)


temp_comp = 0
def oven(T_ambient, T_gradient):
    global temp_comp
    temp_offset = 75  # center temp at 5, fuzzy mean = 5
    normalized_T_ambient = T_ambient - temp_offset
    normalized_T_gradient = T_gradient - 5
    temp_comp = temp_comp + normalized_T_gradient
    T_oven = normalized_T_ambient + temp_comp
    print("T_ambient = %.2f" % T_ambient, \
          "T_gradient = %.2f" % T_gradient, \
            " T_oven = %.2f" % T_oven, \
            " Compensator = %.2f" % (temp_comp-75.0))
    return T_oven
######
sensor = "P9_39"
#ADC.setup()
file1 = open('adc_ambient.txt', 'r')


temp_comp = 0
T_gradient = 0


# define the line equations
def TL1(x): return (2*x)/5
def TL2(x): return (-2*(x-5))/5
def JR1(x): return (x-2)/3
def JR2(x): return -((x-8)/3)
def TH1(x): return (2*(x-5))/5
def TH2(x): return -(2*(x-10)/5)


# define the rules
def equations(x):
  Eq = []
  if TL1(x)>= 0 and TL1(x) <= 1: Eq.append([TL1(x),7.5])
  if TL2(x)>= 0 and TL2(x) <= 1: Eq.append([TL2(x),7.5])
  if JR1(x)>= 0 and JR1(x) <= 1: Eq.append([JR1(x),5])
  if JR2(x)>= 0 and JR2(x) <= 1: Eq.append([JR2(x),5])
  if TH1(x)>= 0 and TH1(x) <= 1: Eq.append([TH1(x),2.5])
  if TH2(x)>= 0 and TH2(x) <= 1: Eq.append([TH2(x),2.5])
  return Eq


while True:
    time.sleep(0.05)


    # Read temperature sensor
    #reading = ADC.read(sensor) # values from 0 to 1


    # read file line by line until EOF
    reading = file1.readline()
    if not reading:
      break
    else:
      reading = float(reading)  # convert to floating point FISber


    voltage = reading * 3.3
    temperatureC = (voltage - 0.5) * 100  # -50 to 280
    T_ambient = temperatureC


    # Call model
    T_oven = oven(T_ambient, T_gradient)


    # Use fuzzy logic (FIS) to keep the oven temperature constant at 5C
    # FIS takes "T_oven" as input and outputs "T_gradient" (between 0 and 10)


    ## Your code goes here ...
    FIS = (equations(T_oven))


    if len(FIS) == 2:
      n = ((FIS[0][0] * FIS[0][1]) + (FIS[1][0] * FIS[1][1]))
      d = (FIS[0][0] + FIS[1][0])
      T_gradient = n/d
    elif len(FIS) == 1:
      n = (FIS[0][0] * FIS[0][1])
      d = (FIS[0][0])
      T_gradient = n/d
    elif T_oven > 10: T_gradient = 2.5
    elif T_oven < 0: T_gradient = 7.5
    else:
      n = ((FIS[0][0] * FIS[0][1]) + (FIS[1][0] * FIS[1][1]) + (FIS[2][0] * FIS[2][1]))
      d = (FIS[0][0] + FIS[1][0] + FIS[2][0])
      T_gradient = n/d


file1.close()
print('End of Simulation')
